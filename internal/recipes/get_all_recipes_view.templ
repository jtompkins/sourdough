package recipes

templ GetAllRecipesView(recipes []*Recipe) {
	@Layout("My Recipes") {
		<main class="my-recipes" x-data="{ showInputs: false }">
			<header>
				<input type="text" name="term" placeholder="search your recipes" hx-get="/search" hx-trigger="keyup changed delay:250ms" hx-target="#recipe-list"/> <span class="button button--action" @click="showInputs = true" x-show="!showInputs"><i class="fa-solid fa-plus"></i> new recipe</span>
			</header>
			<div class="add-recipe" x-data="newRecipeComponent()" x-show="showInputs" @paste="handlePaste($event)">
				<form action="/recipes" method="POST" enctype="multipart/form-data" hx-boost="false">
					<div class="recipe-placeholder" x-show="!inputType">
						<i class="fa-solid fa-paste"></i>Paste in your recipe &mdash; you can use images or text!
					</div>
					<div class="recipe-image" x-show="inputType === 'image'">
						<img x-bind:src="imagePreview"/>
					</div>
					<div class="recipe-text" x-show="inputType === 'text'" x-text="textPreview"></div>
					<div class="toolbar">
						<div class="toolbar--left">
							<button type="submit" class="button button--action" x-show="inputType"><i class="fa-solid fa-floppy-disk"></i>Save</button>
							<a class="button" @click="cancel(); showInputs=false;"><i class="fa-solid fa-xmark"></i>Maybe next time?</a>
						</div>
					</div>
					<input type="file" name="recipeImage" x-ref="recipeImage" style="display: none;" accept="image/*"/>
					<input type="text" name="recipeText" x-ref="recipeText" style="display: none;"/>
				</form>
			</div>
			<div id="recipe-list">
				for _, recipe := range recipes {
					@RecipeComponent(recipe)
				}
			</div>
		</main>
		<script>
			function newRecipeComponent() {
				return {
					inputType: '',
					imagePreview: '',
					textPreview: '',
					
					handlePaste(event) {
						const items = event.clipboardData?.items;
						if (!items) return;
						
						for (let item of items) {
							if (item.type.indexOf('image') !== -1) {
								event.preventDefault();
								const file = item.getAsFile();
								if (file) {
									this.setImageFile(file);
								}
								break;
							} else if (item.kind === 'string' && item.type === 'text/plain') {
								event.preventDefault();
								item.getAsString(s => this.setText(s));
							}
						}
					},

					setText(text) {
						this.inputType="text";
						this.textPreview = text;
						this.$refs.recipeText.value=text;
					},
					
					setImageFile(file) {
						this.inputType = "image";
						const reader = new FileReader();
						reader.onload = (e) => {
							this.imagePreview = e.target.result;
						};
						reader.readAsDataURL(file);
						
						// Set the file input
						const dt = new DataTransfer();
						dt.items.add(file);
						this.$refs.recipeImage.files = dt.files;
					},

					cancel() {
						this.inputType='';
						this.imagePreview = '';
						this.textPreview = '';
						this.$refs.recipeImage.value = '';
						this.$refs.recipeText.value = '';
					}
				}
			}
		</script>
	}
}
